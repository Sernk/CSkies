using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Terraria;
using Terraria.DataStructures;
using Terraria.ID;
using Terraria.ModLoader;
using Terraria.ModLoader.IO;
using Terraria.GameInput;
using Terraria.Graphics.Shaders;
using Terraria.GameContent.Events;
using Terraria.Utilities;
using SubworldLibrary;
using Terraria.World.Generation;

namespace CSkies
{
    public class MoltenCore : Subworld
    {
        public override int width => 2200;
        public override int height => 1800;
        public override ModWorld modWorld => ModContent.GetInstance<CWorld>();
        public override bool noWorldUpdate => true;
        public override bool saveSubworld => false;
        public override List<GenPass> tasks => new List<GenPass>()
        {
            new SubworldGenPass(1f, progress =>
            {
                progress.Message = "Melting";
                Main.spawnTileY = 827;
                Main.spawnTileX = 432;
                Main.worldSurface = 550;
                Main.rockLayer = 550;
                CoreGen();
            })
        };

        public void CoreGen()
        {
            Mod mod = CSkies.inst;
            Dictionary<Color, int> colorToTile = new Dictionary<Color, int>
            {
                [new Color(128, 0, 0)] = ModContent.TileType<Tiles.MoltenCore.ScoriaNatural>(),
                [new Color(128, 64, 0)] = ModContent.TileType<Tiles.MoltenCore.ScoriaBricksNatural>(),
                [Color.Black] = -2 //turn into air
            };

            Dictionary<Color, int> colorToWall = new Dictionary<Color, int>
            {
                [new Color(128, 128, 0)] = ModContent.WallType<Tiles.MoltenCore.ScoriaBrickWallNatural>(),
                [Color.Black] = -1 //don't touch when genning
            };

            TexGen gen = BaseWorldGenTex.GetTexGenerator(mod.GetTexture("Worldgen/MoltenCore"), colorToTile, mod.GetTexture("Worldgen/MoltenCoreWalls"), colorToWall, mod.GetTexture("Worldgen/MoltenCoreLiquids"), mod.GetTexture("Worldgen/MoltenCoreSlopes"));
            gen.Generate(0, 0, true, true);
        }

        public override void Load()
        {
            Mod CS = ModLoader.GetMod("CSkies");
            
            Main.dayTime = false;
            Main.time = 15000;
        }
        public override void Unload()
        {

        }
    }
    public class GenUtils
    {
        public static void ObjectPlace(Point Origin, int x, int y, int TileType)
        {
            WorldGen.PlaceObject(Origin.X + x, Origin.Y + y, TileType);
            NetMessage.SendObjectPlacment(-1, Origin.X + x, Origin.Y + y, TileType, 0, 0, -1, -1);
        }
        public static void ObjectPlace(int x, int y, int TileType)
        {
            WorldGen.PlaceObject(x, y, TileType);
            NetMessage.SendObjectPlacment(-1, x, y, TileType, 0, 0, -1, -1);
        }
        public static void ObjectPlaceRand1(Point Origin, int x, int y, int TileType)
        {
            WorldGen.PlaceObject(Origin.X + x, Origin.Y + y, TileType, false, WorldGen.genRand.Next(3));
            NetMessage.SendObjectPlacment(-1, Origin.X + x, Origin.Y + y, TileType, WorldGen.genRand.Next(3), 0, -1, -1);
        }
        public static void ObjectPlaceRand1(int x, int y, int TileType)
        {
            WorldGen.PlaceObject(x, y, TileType, false, WorldGen.genRand.Next(3));
            NetMessage.SendObjectPlacment(-1, x, y, TileType, WorldGen.genRand.Next(3), 0, -1, -1);
        }
    }
    public class SoullessBiomeNPC : GlobalNPC
    {
        public override bool InstancePerEntity
        {
            get
            {
                return true;
            }
        }
        public override void EditSpawnPool(IDictionary<int, float> pool, NPCSpawnInfo spawnInfo)
        {
            /*if (Main.player[Main.myPlayer].GetModPlayer<CPlayer>().ZoneCore)
            {
                pool.Clear();
               
            }*/
        }
    }
    public class NotInSubworlds : ModWorld
    {
        public override void PostUpdate()
        {
            if (!SLWorld.subworld)
            {
                SubworldCache.UpdateCache();
            }
        }
    }
}